import os
import base64
import requests
from io import BytesIO
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = "8092687951:AAGp4a-h-CYi4eVn-pqF9cXjjK49gVj2K-M"
STABILITY_API_KEY = "sk-BfNK4kYxvgkv0BQVd0o1Tq1BF6h0MSp2rwAgWC0av9S1kdu2"


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
app = Application.builder().token(TELEGRAM_TOKEN).build()

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context):
    keyboard = [
        [InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –≥–∞–ª–µ—Ä–µ—é", web_app={"url": "https://tonfox-lixaradka-lixaradkas-projects.vercel.app/"})]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üîÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¶–∏—Ñ—Ä–æ–≤–æ–≥–æ –ê–ª—Ö–∏–º–∏–∫–∞!\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å NFT-–∞—Ä—Ç–µ—Ñ–∞–∫—Ç.",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context):
    text = update.message.text
    user_id = update.message.from_user.id

    if not text:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_url = await generate_image(text)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await update_user_data(user_id, xp=10)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        await update.message.reply_photo(
            photo=image_url,
            caption=f"üé® –í–∞—à –∞—Ä—Ç–µ—Ñ–∞–∫—Ç —Å–æ–∑–¥–∞–Ω!\n"
                    f"üîó –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å: {image_url}"
        )
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Stability AI
UPLOAD_FOLDER = 'uploads'
if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)

async def generate_image(prompt):
    url = "https://api.stability.ai/v1/generation/stable-diffusion-xl-1024-v1-0/text-to-image"
    headers = {
        "Authorization": f"Bearer {STABILITY_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "text_prompts": [{"text": prompt}],
        "cfg_scale": 7,
        "height": 1024,
        "width": 1024,
        "samples": 1,
        "steps": 30
    }

    response = requests.post(url, headers=headers, json=data)
    if response.status_code != 200:
        raise Exception(f"Stability API Error: {response.text}")

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_data = response.json()["artifacts"][0]["base64"]
    image_bytes = base64.b64decode(image_data)
    image_file = BytesIO(image_bytes)
    image_file.name = f"artifact_{int(time.time())}.png"  # –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    with open(os.path.join(UPLOAD_FOLDER, image_file.name), 'wb') as f:
        f.write(image_file.getvalue())

    return f"/{UPLOAD_FOLDER}/{image_file.name}"


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def update_user_data(user_id, xp=0):
    if user_id not in user_data:
        user_data[user_id] = {"xp": 0, "level": 1}
    user_data[user_id]["xp"] += xp
    if user_data[user_id]["xp"] >= 100 * user_data[user_id]["level"]:
        user_data[user_id]["level"] += 1
        await app.bot.send_message(
            chat_id=user_id,
            text=f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è {user_data[user_id]['level']}!"
        )

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤
async def buy_credits(update: Update, context):
    await update.message.reply_invoice(
        title="–ü–æ–∫—É–ø–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤",
        description="100 –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
        payload="100_credits",
        provider_token="YOUR_PROVIDER_TOKEN",  # –ü–æ–ª—É—á–∏—Ç–µ —É –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        currency="USD",
        prices=[{"label": "100 Credits", "amount": 500}]  # $5.00
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
async def handle_successful_payment(update: Update, context):
    user_id = update.message.from_user.id
    if user_id not in user_data:
        user_data[user_id] = {"credits": 0}
    user_data[user_id]["credits"] += 100
    await update.message.reply_text("‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω! –í–∞—à–∏ –∫—Ä–µ–¥–∏—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã.")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("buy", buy_credits))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
app.add_handler(CallbackQueryHandler(handle_successful_payment))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


