import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
QUESTIONS, PHONE = range(2)

# ID –≥—Ä—É–ø–ø—ã, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ
GROUP_CHAT_ID = -4631460753

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
start_keyboard = ReplyKeyboardMarkup([["üìú –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"]], resize_keyboard=True)
main_keyboard = ReplyKeyboardMarkup(
    [["üìú –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]], resize_keyboard=True
)
phone_keyboard = ReplyKeyboardMarkup(
    [["üìú –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]], resize_keyboard=True
)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°—Ç–∞—Ä—Ç –¥–∏–∞–ª–æ–≥–∞."""
    context.user_data.setdefault("phones", [])  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –∞—Ä–µ–Ω–¥—ã WhatsApp –∞–∫–∫–∞—É–Ω—Ç–æ–≤.\n"
        "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:\n"
        "1. –ö–æ–≥–¥–∞ –±—ã–ª —Å–æ–∑–¥–∞–Ω –∞–∫–∫–∞—É–Ω—Ç?\n"
        "2. –ù–∞—Å–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–µ–Ω –∞–∫–∫–∞—É–Ω—Ç?\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.",
        reply_markup=main_keyboard,
    )
    return QUESTIONS


async def get_questions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    text = update.message.text

    if text == "üìú –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è":
        return await list_phones(update, context)

    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        return await start(update, context)

    context.user_data["answers"] = text

    await update.message.reply_text(
        "‚ù§Ô∏è –°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.üìû\n\n"
        "üõ°Ô∏è –ú—ã –Ω–µ –∏–º–µ–µ–º –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.\n"
        "üîè –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.",
        reply_markup=phone_keyboard,
    )
    return PHONE


async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –≥—Ä—É–ø–ø—É."""
    text = update.message.text

    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await update.message.reply_text(
            "üîô –í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥. –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.", reply_markup=main_keyboard
        )
        return QUESTIONS

    if text == "üìú –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è":
        return await list_phones(update, context)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –≤ —Å–ø–∏—Å–æ–∫
    context.user_data["phones"].append(text)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = update.message.from_user
    username = user.username
    user_identifier = f"@{username}" if username else f"ID: {user.id}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –≥—Ä—É–ø–ø—É
    message = (
        f"üìå –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_identifier}\n"
        f"üìã –û—Ç–≤–µ—Ç—ã: {context.user_data.get('answers')}\n"
        f"üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {text}"
    )

    await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=message)

    await update.message.reply_text(
        "‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã! –ú—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ.",
        reply_markup=start_keyboard,
    )

    return ConversationHandler.END


async def list_phones(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤."""
    phones = context.user_data.get("phones", [])

    if not phones:
        await update.message.reply_text("üì≠ –í—ã –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞.", reply_markup=main_keyboard)
    else:
        phone_list = "\n".join(phones)
        await update.message.reply_text(f"üìú –í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n{phone_list}", reply_markup=main_keyboard)

    return QUESTIONS if update.message.text == "üìú –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è" else PHONE


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏."""
    await update.message.reply_text(
        "üö´ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ.",
        reply_markup=ReplyKeyboardRemove(),
    )
    return ConversationHandler.END


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    application = Application.builder().token("7941700806:AAGCClSoFdHWwV1c4u5YVpMT3-9qFokGV4Y").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            QUESTIONS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_questions)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(conv_handler)
    application.run_polling()


if __name__ == "__main__":
    main()


